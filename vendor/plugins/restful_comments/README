Provides complete comment system, which can be easily integrated into existing application. 
Comments may be customized with different stylesheets, user access rules. 
Plugin supports localization using Globalite plugin. 
Transparently integrates with Restful Citations plugin.

== Features

* Easy integration
* Textilize markup in comments
* Globalite localization
* Customizing stylesheets
* Customizing access policy
== Requirements

This plugin requires followng plugins installed:
* Engines (http://agilewebdevelopment.com/plugins/engines)
* Globalite (http://agilewebdevelopment.com/plugins/globalite)

If your Rails version prior to 1.2:
* Restful Rails (http://agilewebdevelopment.com/plugins/restful_rails) 

== Installation

script/install svn://rubyforge.org/var/svn/rf-comments/trunk/restful_comments
script/generate plugin_migration

== Using

Common configuring:
1. Add *map*.*from_plugin* :*restful_comments* to your *routes*.*rb*
2. Copy localization files from {*RAILS_ROOT*}/*vendor*/*plugins*/*restful_comments*/*lang*/*ui* directory to your {*RAILS_ROOT*}/*lang*/*ui* directory, or add their content to your existing localization files
3. In *environment*.*rb* set your localization language (for example, *Globalite*.*language* = :*en*)
4. If you want to specify per-user access rules and your helpers haven't method *current_user*, implement this method in *ApplicationHelper*.

For commentable:
1. Add *acts_as_restful_commentable* into your model class to declare it as commentable
2. Add <%= *restful_comments_include*%> into your erb template to include styles and javascripts
3. Don't forget to add <%= *javascript_include_tag* :*defaults* %> to your layout
4. Add <%= *restful_comments_for* {model_instance} %> into view to render comments of  {model_instance}

== Configuring access

You can specify access rules for different commentable models. To do it, you need to specify block in acts_as_restful_commentable call.

This block can contain some of methods:

	def can_comment?( commentable, comment, user )
	
	def can_edit?( commentable, comment, user )
	
	def can_remove?( commentable, comment, user )

Each method returns if user can make coresponding action on comment. If user comments a commentable, it will be checked with method can_comment?( commentable, nil, user ), if user replyes on specific comment, it will be checked with can_comment?( commentable, comment, user )

If you want to specify user-dependent access, when user must be accessible through current_user method in helper

== Configuring styles

To configure display of editor you may pass hash of options to *restful_comments_include*. Available options:
* :*style* - name of built-in style. Available values: 'gray', 'lj'
* :*stylesheet* - name of application stylesheet to use
